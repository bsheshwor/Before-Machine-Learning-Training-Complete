
-- Q-1
SELECT FIRST_NAME FROM Worker WORKER_NAME;
-- Q-2
SELECT UPPER(FIRST_NAME) FROM Worker WORKER_NAME;
-- Q-3
SELECT DISTINCT DEPARTMENT FROM Worker UNIQUE_DEPARTMENT_NAME;
-- Q-4
SELECT LEFT(FIRST_NAME, 3) FROM Worker FIRST_THREE_CHARACTERS;
-- Q-5
SELECT POSITION('a' in FIRST_NAME) AS position_of_a
FROM Worker
WHERE FIRST_NAME='Amitabh';
-- Q-6
SELECT RTRIM(FIRST_NAME) AS trimmed_first_name FROM Worker;
-- Q-7
SELECT LTRIM(DEPARTMENT) AS trimmed_department,
LENGTH(LTRIM(DEPARTMENT)) AS length_of_department
FROM Worker;
-- Q-8
SELECT DISTINCT(DEPARTMENT) AS distinct_department,
LENGTH(DEPARTMENT) AS length_of_department
FROM Worker;
-- Q-9
SELECT REPLACE(FIRST_NAME, 'a', 'A') AS modified_first_name
FROM Worker;
-- Q-10
SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS COMPLETE_NAME
FROM Worker;
-- Q-11
SELECT * FROM Worker
ORDER BY FIRST_NAME ASC;
-- Q-12
SELECT *
FROM Worker
ORDER BY FIRST_NAME ASC, DEPARTMENT DESC;
-- Q-13
SELECT *
FROM Worker
WHERE FIRST_NAME IN ('Vipul', 'Satish');
-- Q-14
SELECT *
FROM Worker
WHERE FIRST_NAME NOT IN ('Vipul', 'Satish');
-- Q-15
SELECT *
FROM Worker
WHERE DEPARTMENT = 'Admin';
-- Q-16
SELECT *
FROM Worker
WHERE POSITION('a' IN FIRST_NAME) > 0;
-- Q-17
SELECT *
FROM Worker
WHERE RIGHT(FIRST_NAME,1) = 'a';
-- Q-18
SELECT *
FROM Worker
WHERE LENGTH(FIRST_NAME) = 6
AND RIGHT(FIRST_NAME, 1) = 'h';
-- Q-19
SELECT *
FROM Worker
WHERE SALARY BETWEEN 100000 AND 500000;
-- Q-20
SELECT *
FROM Worker
WHERE EXTRACT(MONTH FROM JOINING_DATE) = 2
	AND EXTRACT(YEAR FROM JOINING_DATE) = 2014;
-- Q-21
SELECT COUNT(*) AS employee_count
FROM Worker
WHERE DEPARTMENT = 'Admin';
-- Q-22
SELECT FIRST_NAME, LAST_NAME
FROM Worker
WHERE SALARY BETWEEN 50000 AND 100000;
-- Q-23
SELECT DEPARTMENT, COUNT(*) AS employee_count
FROM Worker
GROUP BY DEPARTMENT
ORDER BY employee_count DESC;
-- Q-24
SELECT w.*
FROM Worker w
JOIN Title t ON w.WORKER_ID = t.WORKER_REF_ID
WHERE t.WORKER_TITLE = 'Manager';
-- Q-25
SELECT FIRST_NAME, LAST_NAME, COUNT(*) AS duplicate_count
FROM Worker
GROUP BY FIRST_NAME, LAST_NAME
HAVING COUNT(*) > 1;

-- Q-26
SELECT *
FROM Worker
where WORKER_ID % 2 <> 0;
-- Q-27
SELECT *
FROM Worker
where WORKER_ID % 2 = 0;
-- Q-28
CREATE TABLE NewWorker AS
SELECT * FROM Worker;
-- Q-29
SELECT *
FROM Worker
INTERSECT
SELECT * 
FROM NewWorker;
-- Q-30
SELECT *
FROM Worker
EXCEPT
SELECT * 
FROM NewWorker;
-- Q-31
SELECT NOW() AS current_data_time;
-- Q-32
SELECT *
FROM Worker
LIMIT 10;
-- Q-33
SELECT DISTINCT SALARY
FROM Worker
ORDER BY SALARY DESC
OFFSET 4 LIMIT 1;
-- Q-34
SELECT SALARY
FROM (
	SELECT SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS rank
	FROM Worker
) ranked_salaries
WHERE rank = 5;
-- Q-35
SELECT SALARY, STRING_AGG(FIRST_NAME, ',') AS employee_names
FROM Worker
GROUP BY SALARY
HAVING COUNT(*) > 1;
-- Q-36
SELECT DISTINCT SALARY
FROM Worker
ORDER BY SALARY DESC
OFFSET 1 LIMIT 1;
-- Q-37
SELECT *
FROM Worker
UNION ALL
SELECT *
FROM Worker;
-- Q-38
SELECT *
FROM Worker
INTERSECT
SELECT *
FROM NewWorker;
-- Q-39
SELECT *
FROM Worker
ORDER BY WORKER_ID
LIMIT (SELECT COUNT(*)/2 FROM Worker);
-- Q-40
SELECT DEPARTMENT, COUNT(*) AS employee_count
FROM Worker
GROUP BY DEPARTMENT
HAVING COUNT(*) < 5;
-- Q-41
SELECT DEPARTMENT, COUNT(*) AS employee_count
FROM Worker
GROUP BY DEPARTMENT;
-- Q-42
SELECT *
FROM Worker
LIMIT 1;
-- Q-43
SELECT *
FROM Worker
OFFSET (SELECT COUNT(*)-1 FROM Worker) LIMIT 1;
-- Q-44
SELECT *
FROM Worker
OFFSET (SELECT COUNT(*)-5 FROM Worker) LIMIT 5;
-- Q-45
SELECT DISTINCT ON (DEPARTMENT) DEPARTMENT, FIRST_NAME, LAST_NAME, SALARY
FROM Worker
ORDER BY DEPARTMENT, SALARY DESC;
-- Q-46
SELECT DISTINCT SALARY
FROM Worker
ORDER BY SALARY DESC
LIMIT 3;
-- Q-47
SELECT DISTINCT SALARY
FROM Worker
ORDER BY SALARY ASC
LIMIT 3;
-- Q-48
SELECT DISTINCT SALARY
FROM Worker
ORDER BY SALARY DESC
OFFSET 1 LIMIT 5;
-- Q-49
SELECT DEPARTMENT, SUM(SALARY) AS total_salary
FROM Worker
GROUP BY DEPARTMENT;
-- Q-50
SELECT FIRST_NAME, LAST_NAME, SALARY
FROM Worker
ORDER BY SALARY DESC
OFFSET 1 LIMIT 5;


------------
do
$$
declare
	f record;
begin
	for f in select first_name, salary
		from Worker
		order by salary desc, first_name
		limit 5
	loop
	raise notice '% - %', f.first_name, f.salary;
	end loop;
end;
$$;



